import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.Arrays;

public class TextCounter {
	
	static int nextIndex = 0;
	static String[] checkArray = new String[1100];
	
	
	
	
	public static void push(String e) {
	    checkArray[nextIndex] = e;
	    ++nextIndex;
	}
	
	public static int find(String target)
	{
	    for (int i = 0; i < 500; i++)
	    {

	        if (checkArray[i].equals(target)) {

	        	return i;
	            
	        }
	    }
	 
	    return 0;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*First I download the text from the webpage and turn it into a long string
		 */
		
		String raven ="";
		
		try {
			String webPage = "https://www.gutenberg.org/files/1065/1065-h/1065-h.htm";
			URL url = new URL(webPage);
			URLConnection urlConnection = url.openConnection();
			InputStream is = urlConnection.getInputStream();
			InputStreamReader isr = new InputStreamReader(is);

			int numCharsRead;
			char[] charArray = new char[1024];
			StringBuffer sb = new StringBuffer();
			while ((numCharsRead = isr.read(charArray)) > 0) {
				sb.append(charArray, 0, numCharsRead);
			}
			String result = sb.toString();

			raven=result;
			
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		/*This next part removes all unnecessary pieces and symbols from the text*/
		
		String ravena = raven.substring(3167,11430);
		

		
		ravena = ravena.replaceAll("<[^>]*>", "");
		ravena = ravena.replaceAll("â€™", "");
		ravena = ravena.replaceAll("&mdash;", " ");
		ravena = ravena.replaceAll(";", " ");
		ravena = ravena.replaceAll("â€œ", "");
		ravena = ravena.replaceAll("â€", "");

		ravena = ravena.replaceAll("[^a-zA-Z\\s]", "").replaceAll("\\s+", " ");
		
		System.out.println(ravena);
		
		
		String[] ravray = ravena.split(" ");

		
		WordC[] wordArray = new WordC[ravray.length];
		
		for (int i=0; i<=ravray.length-1; i++) {
			wordArray[i]= new WordC("z");
		}

		for (int i=0; i<=ravray.length-1; i++) {

			if (Arrays.asList(checkArray).contains(ravray[i])) {
				wordArray[find(ravray[i])].upCount();

			}
			else {
				wordArray[nextIndex]=new WordC(ravray[i]);
				push(ravray[i]);
			}
		}
		
		/*This last Section goes through the array and should only have one copy of each word*/
		
		System.out.println("\nCounts for Words:\n");

		WordC max= new WordC("");
		
		WordC[] topTw = new WordC[20];
		for (int i=0; i<=19; i++) {
			for (int j=0; j<=nextIndex-1; j++) {
				if (wordArray[j].getCount()>max.getCount()) {
					max=new WordC(wordArray[j].toString(), wordArray[j].getCount());
					
					wordArray[j].setZero();
					
				}
			}

			topTw[i]= new WordC(max.toString(), max.getCount());
			max.setZero();
		}
		for (int i=0; i<=19; i++) {
			topTw[i].getCountS();
		}
		
		
	}
	}


